name: build-test

on:
  push:
    branches:
      - "main"
  release:
    types: [published]
  pull_request:
    types: [opened, reopened, synchronize, labeled]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2-beta
        with:
          node-version: 16.x
      - name: Write dotenv file
        run: |
          cat <<-EOF >.env
          VITE_GIT_COMMIT=${GITHUB_SHA}
          VITE_ROBOTS_INDEX_ALL=${{ github.event_name == 'release' }}
          EOF
      - run: npm ci
      - run: npm run build

      - name: Write version file
        run: |
          # write version info to artifact
          echo "Built from GitHub repo ${{ github.repository }} version ${GITHUB_SHA::7}" > ./build/version.txt

      # add some tests here
      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: website
          path: ./build/
          retention-days: 1
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    # Run on main branch, release or if PR contains the 'preview' label
    if: github.ref == 'refs/heads/main' || github.event_name == 'release' || contains( github.event.pull_request.labels.*.name, 'preview')

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: website
          path: ./website
      - name: Write deploy variables
        id: vars
        run: |
          if [ "${{ github.event_name }}" == "release" ]
          then
              echo "::set-output name=deploy_env::prod"
          elif [ "${GITHUB_REF#refs/heads/}" == "main" ]
          then
              echo "::set-output name=deploy_env::staging"
          elif [ "${{ contains( github.event.pull_request.labels.*.name, 'preview') }}" == "true" ]
          then
             echo "::set-output name=deploy_env::preview"
          else
             echo "::set-output name=deploy_env::unknown"
          fi
      - name: Dump deployment variables
        run: echo "${{ steps.vars.outputs.deploy_env }}"
      - name: Upload to google storage
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: verifa-website
          APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        with:
          cli: gsutil
          args: "-m -h 'Cache-Control: public,max-age=31536000' rsync -r -c -d ./website gs://website-bucket-${{ steps.vars.outputs.deploy_env }}"
      - name: Set Metadata
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: verifa-website
          APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        with:
          cli: gsutil
          args: "-m setmeta -h 'Cache-Control: no-cache,max-age=31536000' 'gs://website-bucket-${{ steps.vars.outputs.deploy_env }}/**.html'"
